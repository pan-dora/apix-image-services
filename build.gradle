import net.researchgate.release.GitAdapter

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'net.researchgate.release' version '2.6.0'
    id 'io.codearte.nexus-staging' version '0.9.0'
    id 'com.palantir.docker' version '0.13.0'
    id 'org.dm.bundle' version '0.10.0'
}

ext {
    name = 'Api-X Image Services'
    description = 'An Image encoding pipeline'
    url = 'https://github.com/pan-dora/apix-image-services'
    inceptionYear = '2017'
    vendor = 'pandorasystems'
    homepage = 'https://pan-dora.github.io/'
    license = 'Apache 2'
}

configurations {
    buildToolsConfig
}

dependencies {
    buildToolsConfig "cool.pandora:pandora-build-tools:0.1.3"
}

task processBuildTools(type: Copy) {
    from {
        configurations.buildToolsConfig.collect {
            zipTree(it).matching {
                include 'checkstyle/*.xml'
                include 'license/*.txt'
            }
        }
    }
    into 'build'
}

apply plugin: 'com.github.hierynomus.license'

configure(allprojects) { project ->
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'org.dm.bundle'


    group = 'cool.pandora.exts'

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }

    ext.camelVersionRange = '[2.18,3)'
    ext.activemqVersionRange = '[5.14,6)'
    ext.fcrepoCamelVersionRange = '[4.5,5)'
    ext.fcrepoCamelToolboxVersionRange = '[4.7.1,5)'
    ext.fcrepoCamelVersion = '4.5.0'
    ext.fcrepoCamelToolboxVersion = "4.7.2"
    ext.activemqVersion = '5.15.0'
    ext.camelVersion = '2.19.2'
    ext.commonsCodecVersion = '1.10'
    ext.commonsIoVersion = '2.5'
    ext.commonslangVersion = '3.6'
    ext.dexxcollectionVersion = "0.6"
    ext.httpclientVersion = '4.5.2'
    ext.httpcoreVersion = '4.4.5'
    ext.jacksonVersion = '2.9.0'
    ext.jenaVersion = '3.1.1'
    ext.junitVersion = "4.12"
    ext.jsonldVersion = '0.11.1'
    ext.logbackVersion = '1.2.3'
    ext.openJpegVersion = "2.1.2"
    ext.thriftVersion = "0.9.3"
    ext.defaultOsgiImports = 'org.osgi.service.blueprint;version="[1,2)",*'
    ext.projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")


    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
        options.compilerArgs += "-parameters"
    }

    processResources {
        filesMatching(["**/Dockerfile", "**/*.cfg"]) {
            expand(project.properties)
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs.add("-Xlint:unchecked")
            options.compilerArgs.add("-Xlint:deprecation")
//                options.compilerArgs.addAll(["--add-modules", "java.se.ee"])
        }
    }

    compileTestJava {
        doFirst {
//                options.compilerArgs.addAll(['--add-modules', 'java.se.ee'])
            options.compilerArgs.add("-Xlint:deprecation")
        }
    }

    release {
        tagTemplate = '$name-$version'
        scmAdapters = [
                GitAdapter
        ]

        git {
            requireBranch = 'master'
            pushToRemote = 'origin'
            pushToBranchPrefix = ''
            commitVersionFileOnly = false
        }
    }

    check.dependsOn processBuildTools

    def dockerResourceDir = "${rootProject.buildDir}/resources/main/docker"
    def mavenInstallPath = "repository/cool/pandora/exts"

    docker {
        name 'pandorasystems/image-services'
        tags "${version}"
        dockerfile file("${dockerResourceDir}/Dockerfile")
        files "${dockerResourceDir}/cfg", "${dockerResourceDir}/entrypoint.sh"
        copySpec.from("${buildDir}/maven").into("${mavenInstallPath}")
        pull true
        noCache true
}

    def homeDir = System.getProperty('user.home')
    def mavenLocal = new File(homeDir, ".m2/repository/cool/pandora/exts")

    task copyTask(type: Copy) {
        from mavenLocal
        into "${rootProject.buildDir}/maven"
    }

    copyTask.dependsOn install
}

configure(subprojects) { subproject ->
    apply plugin: 'com.bmuschko.nexus'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'

    apply plugin: 'jacoco'

    task processConfig(type: Copy) {
        from('src/main/cfg') {
            include '**/*.cfg'
        }
        into 'build/cfg/main'
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourceJar
    }

    classes {
        classes.dependsOn processConfig
    }

    checkstyle {
        configFile = rootProject.file('build/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('build/checkstyle/')
        toolVersion = "8.1"
    }

    jacoco {
        toolVersion = "0.7.9"
    }

    license {
        include "**/*.java"
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                url "${rootProject.buildDir}/maven"
            }
        }
    }

    bundle {
        includeTransitiveDependencies = true
        passProjectProperties = false
    }

    modifyPom {
        //noinspection GroovyAssignabilityCheck
        project {
            name name
            description description
            url url
            inceptionYear inceptionYear

                organization {
                name vendor
                url homepage
                }

                developers {
                    developer {
                        id 'acoburn'
                        name 'Aaron Coburn'
                        email 'acoburn @ (domain of organization url)'
                        organization 'Amherst College'
                        organizationUrl 'https://www.amherst.edu'
                        roles {
                            role 'developer'
                        }
                        timezone '-5'
                    }
                    developer {
                        id 'bseeger'
                        name 'Bethany Seeger'
                        email 'bseeger @ (domain of organization url)'
                        organization 'Amherst College'
                        organizationUrl 'https://www.amherst.edu'
                        roles {
                            role 'developer'
                        }
                        timezone '-5'
                    }
                    developer {
                        id 'christopher-johnson'
                        name 'Christopher Johnson'
                        email 'chjohnson @ (domain of organization url)'
                        organization ''
                        organizationUrl ''
                        roles {
                            role 'developer'
                        }
                        timezone '+1'
                    }
                }

                scm {
                    connection 'scm:git:git://github.com/pan-dora/apix-image-services.git'
                    developerConnection 'scm:git:git@github.com/pan-dora/apix-image-services.git'
                    url 'https://github.com/pan-dora/apix-image-services/'
                    tag 'HEAD'
                }

                licenses {
                    license {
                        name 'Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
            }
        }

    nexusStaging {
        packageGroup = "cool.pandora"
        stagingProfileId = "4d5f13c386f543"
    }

    nexus {
        sign = true
        repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

project("exts-encoder") {

    description = 'Binary Encoding service'
    dependencies {
        compile group: 'org.apache.camel', name: 'camel-core', version: camelVersion
        compile group: 'org.apache.camel', name: 'camel-blueprint', version: camelVersion
        compile group: 'org.apache.camel', name: 'camel-jetty9', version: camelVersion
        compile group: 'org.apache.camel', name: 'camel-exec', version: camelVersion
        compile(group: 'org.fcrepo.camel', name: 'fcrepo-camel', version: fcrepoCamelVersion) {
            exclude(module: 'slf4j-log4j12')
        }
        testCompile group: 'junit', name: 'junit', version: junitVersion
        testCompile group: 'org.apache.camel', name: 'camel-test-blueprint', version: camelVersion
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    }

    jar {
        manifest {
            attributes 'Import-Package': "org.apache.camel,${defaultOsgiImports}",
                'Export-Package': "cool.pandora.exts.encoder;version=${projectOsgiVersion}"
        }
    }

    artifacts {
        archives (file('build/cfg/main/cool.pandora.exts.encoder.cfg')) {
            classifier 'configuration'
            type 'cfg'
        }
    }
}

project("exts-image") {

    description = 'Image manipulation service'
    dependencies {
        compile group: 'org.apache.camel', name: 'camel-core', version: camelVersion
        compile group: 'org.apache.camel', name: 'camel-blueprint', version: camelVersion
        compile group: 'org.apache.camel', name: 'camel-jetty9', version: camelVersion
        compile group: 'org.apache.camel', name: 'camel-exec', version: camelVersion
        compile(group: 'org.fcrepo.camel', name: 'fcrepo-camel', version: fcrepoCamelVersion) {
            exclude(module: 'slf4j-log4j12')
        }
        testCompile group: 'junit', name: 'junit', version: junitVersion
        testCompile group: 'org.apache.camel', name: 'camel-test-blueprint', version: camelVersion
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    }

    jar {
        manifest {
            attributes 'Import-Package': "org.apache.camel,${defaultOsgiImports}",
                'Export-Package': "cool.pandora.exts.image;version=${projectOsgiVersion}"
        }
    }

    artifacts {
        archives (file('build/cfg/main/cool.pandora.exts.image.cfg')) {
            classifier 'configuration'
            type 'cfg'
        }
    }
}

project("imaging-karaf") {
    description = 'Karaf Provisioning Features for Imaging services'

    processResources {
        outputs.upToDateWhen { false }
        expand project.properties
    }

    artifacts {
        archives (file('build/resources/main/features.xml')) {
            classifier 'features'
            type 'xml'
        }
    }
}
