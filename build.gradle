plugins {
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'net.researchgate.release' version '2.4.0'
    id 'org.sonarqube' version '2.2.1'
}

allprojects  {
    apply plugin: 'maven'

    group = 'edu.amherst.acdc'

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    release {
        tagTemplate = '$name-$version'
    }

}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        vendor = 'Amherst College'
        homepage = 'https://www.amherst.edu'
        docURL = 'https://acdc.amherst.edu/wiki'
        license = 'Apache 2'

        camelVersionRange = '[2.18,3)'
        activemqVersionRange = '[5.14,6)'
        fcrepoCamelVersionRange = '[4.5,5)'
        fcrepoCamelToolboxVersionRange = '[4.7.1,5)'

        /* Dependencies */
        activemqVersion = '5.14.1'
        camelVersion = '2.18.0'
        commonsIoVersion = '2.5'
        commonsLangVersion = '3.4'
        derbyVersion = '10.12.1.1'
        fcrepoCamelVersion = '4.5.0'
        fcrepoCamelToolboxVersion = '4.7.1'
        hk2Version = '2.4.0'
        httpclientVersion = '4.5.2'
        httpcoreVersion = '4.4.5'
        jacksonVersion = '2.7.5'
        jenaVersion = '3.1.1'
        junitVersion = '4.12'
        jsonldVersion = '0.8.3'
        logbackVersion = '1.1.7'
        marmottaVersion = '3.3.0'
        postgresqlVersion = '9.4.1208'
        saxonVersion = '9.6.0-7'
        slf4jVersion = '1.7.21'
        springVersion = '4.1.7.RELEASE'
        woodstoxVersion = '4.4.1'
        xercesVersion = '2.11.0'

        /* Transitive deps */
        cal10nVersion = '0.8.1'
        commonsBeanutilsVersion = '1.8.3'
        commonsCodecVersion = '1.10'
        commonsCollectionsVersion = '3.2.1'
        commonsCsvVersion = '1.4'
        commonsDigesterVersion = '1.8'
        commonsHttpclientVersion = '3.1'
        commonsValidatorVersion = '1.4.0'
        dexxVersion = '0.6'
        fluentHcVersion = '4.5.2'
        fcrepoClientVersion = '0.2.1'
        httpclientCacheVersion = '4.3.5'
        httpmimeVersion = '4.5.2'
        httpcoreNioVersion = '4.4.4'
        jaxenVersion = '1.1.6'
        jdom2Version = '2.0.5'
        jodaTimeVersion = '2.5'
        jsonldSesameVersion = '0.5.1'
        semarglVersion = '0.6.1'
        sesameVersion = '2.7.13'
        thriftVersion = '0.9.2'
        wrappedBundleLocation = 'http://www.ats.amherst.edu/bundles'

        /* Testing */
        paxExamVersion = '4.9.1'
        karafVersion = '4.0.5'
        fcrepoVersion = '4.6.0'
        fusekiVersion = '2.3.1'
        xercesVersion = '2.11.0'
        osgiVersion = '4.3.1'

        /* OSGi */
        defaultOsgiImports = 'org.osgi.service.blueprint;version="[1,2)",*'
        projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")
    }

    task processConfig(type: Copy) {
        from('src/main/cfg') {
            include '**/*.cfg'
        }
        into 'build/cfg/main'
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }


    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from javadoc
    }

    artifacts {
        archives javadocJar
        archives sourceJar
    }

    classes {
        classes.dependsOn processConfig
    }

    checkstyle {
        configFile = rootProject.file('build/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('build/checkstyle/')
    }

    jacoco {
        toolVersion = "0.7.6.201602180812"
    }

    license {
        include "**/*.java"
        header rootProject.file('build/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }

    signing {
        required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories.mavenDeployer {
            def sonatypeUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : ""
            def sonatypePassword = project.hasProperty('ossrhPassword') ? ossrhPassword : ""
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                packaging 'jar'
                url 'https://acdc.amherst.edu/wiki'
                inceptionYear '2015'
                name 'Amherst College Repository Extension Services'
                description 'Repository Extension Services'

                organization {
                    name project.vendor
                    url project.homepage
                }

                developers {
                    developer {
                        id 'acoburn'
                        name 'Aaron Coburn'
                        email 'acoburn @ (domain of organization url)'
                        organization 'Amherst College'
                        organizationUrl 'https://www.amherst.edu'
                        roles {
                            role 'developer'
                        }
                        timezone '-5'
                    }
                    developer {
                        id 'bseeger'
                        name 'Bethany Seeger'
                        email 'bseeger @ (domain of organization url)'
                        organization 'Amherst College'
                        organizationUrl 'https://www.amherst.edu'
                        roles {
                            role 'developer'
                        }
                        timezone '-5'
                    }
                }

                scm {
                    connection 'scm:git:git://gitlab.amherst.edu/acdc/repository-extension-services.git'
                    developerConnection 'scm:git:git@gitlab.amherst.edu:acdc/repository-extension-services.git'
                    url 'https://gitlab.amherst.edu/acdc/repository-extension-services'
                    tag 'HEAD'
                }

                licenses {
                    license {
                        name 'Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0'
                        comments 'Copyright (c) 2016 Amherst College'
                    }
                }
            }
        }
    }

    if (project.name != 'acrepo-itests') {
        afterReleaseBuild.dependsOn uploadArchives
    }
}

configurations {
    buildToolsConfig
}


dependencies {
    buildToolsConfig "edu.amherst.acdc:acrepo-build-tools:0.1.0"
}

task processBuildTools(type: Copy) {
    from {
        configurations.buildToolsConfig.collect {
            zipTree(it).matching {
                include 'checkstyle/*.xml'
                include 'license/*.txt'
            }
        }
    }
    into 'build'
}

sonarqube {
    properties {
        property "sonar.projectName", "Amherst College Repository Extension Services"
        property "sonar.projectKey", "edu.amherst.acdc:repository-services"
    }
}

task docs(type: Javadoc) {
    source subprojects.collect {project -> project.sourceSets.main.allJava }
    classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath})
    destinationDir = new File(projectDir, "docs/${version}")
}

check.dependsOn processBuildTools
afterReleaseBuild.dependsOn docs

